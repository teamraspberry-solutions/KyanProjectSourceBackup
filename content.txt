Got it! I'll focus only on the bot's backend, ensuring everything is efficient, standalone, and optimized for Raspberry Pi 4.

Hereâ€™s the updated project structure:

ðŸ“‚ kyan-bot/ (Root Project Folder)
â”œâ”€â”€ ðŸ“‚ backend/ (Python-based backend services & bot logic)
â”‚ â”œâ”€â”€ app.py (Main bot script, manages STT, TTS, chatbot, and characteristic switching)
â”‚ â”œâ”€â”€ focus_tracker.py (Handles focus detection every 30 sec in study mode)
â”‚ â”œâ”€â”€ sentiment_analysis.py (Runs sentiment tracking every minute in friendly mode)
â”‚ â”œâ”€â”€ database.py (Manages SQLite storage & cloud syncing with PostgreSQL)
â”‚ â”œâ”€â”€ speech_processing.py (Handles STT, TTS with Azure API)
â”‚ â”œâ”€â”€ conversation_manager.py (Processes & temporarily stores conversations before DB write)
â”‚ â”œâ”€â”€ error_handler.py (Centralized error handling & logging system)
â”‚ â”œâ”€â”€ config.py (Stores API keys, database settings, and configurable parameters)
â”‚ â”œâ”€â”€ requirements.txt (Python dependencies like azure-cognitiveservices, sqlite3, mediapipe)
â”‚ â””â”€â”€ utils.py (Helper functions: timestamping, formatting, etc.)
â”‚
â”œâ”€â”€ ðŸ“‚ database/ (Stores local SQLite DB files before cloud sync)
â”‚ â”œâ”€â”€ kyan_local.db (SQLite3 database file)
â”‚ â”œâ”€â”€ ðŸ“‚ backup/ (Folder for periodic database backups)
â”‚
â””â”€â”€ README.md (Project documentation & setup guide)

âœ… Next Steps
Set up the SQLite database (database.py) with tables.
Write the app.py bot logic (listening for trigger phrases & switching modes).
Implement Azure-based speech_processing.py (STT & TTS).
Develop focus_tracker.py (Mediapipe-based focus detection).
Integrate sentiment_analysis.py (Azure-based analysis every minute).
Optimize conversation_manager.py (store conversations efficiently).
Ensure robust error handling (error_handler.py) and logging.